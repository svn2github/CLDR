<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Lenient Date/Time/Number Parsing</title>
<style>
<!--
body         { font-family: serif; background-color: #FFFFFF }
-->
</style>
</head>

<body>

<h1>Lenient Date/Time/Number Parsing</h1>
<p>There is a certain amount of leniency built-in for numbers and dates, but not as much as we'd like. For example, here is what happens with some patterns (locale=&quot;en&quot;).</p>
<table border="1" cellspacing="0" cellpadding="4">
  <tr>
    <td width="50%"><b>pattern=&quot;yyyy-MM-dd&quot;</b></td>
    <td width="50%"><b>numeric month</b></td>
  </tr>
  <tr>
    <td width="50%">&quot;2004-01-01&quot;<br>
      &quot;2004-1-1&quot;<br>
      &quot;00002004-000001-00001&quot;<br>
      &quot;&#65298;&#65296;&#65296;&#65300;-&#65297;-&#65297;&quot;<br>
      &quot;&#1634;&#1632;&#1632;&#1636;-&#1633;-&#1633;&quot;<br>
      &quot; 2004- 1- 1&quot;
      <p>&quot; 2004 - 1 - 1&quot;<br>
      &quot;2004/1/1&quot;<br>
      &quot;2004-Jan-1&quot;<br>
      &quot;2004- january-1&quot; , extra space</td>
    <td width="50%">exact match<br>
      missing zeros<br>
      extra zeros<br>
      wide characters<br>
      arabic digits<br>
      extra space before digits
      <p><font color="#FF0000"><b>fails</b></font>: extra space before separators<br>
      <font color="#FF0000"><b>fails</b></font>: different separator<br>
      <font color="#FF0000"><b>fails</b></font>: abbreviated month<br>
      <font color="#FF0000"><b>fails</b></font>: full month, lowercase</p>
    </td>
  </tr>
  <tr>
    <td width="50%"><b>pattern=&quot;yyyy-MMM-dd&quot;</b></td>
    <td width="50%"><b>abbreviated month</b></td>
  </tr>
  <tr>
    <td width="50%">&quot;2004-Jan-1&quot;<br>
      &quot;2004- january-1&quot;
      <p>&quot;2004-01-01&quot;</td>
    <td width="50%">abbreviated month<br>
      full month, lowercase, extra space
      <p><font color="#FF0000"><b>fails</b></font>: numeric</p>
    </td>
  </tr>
</table>
<p>Some of the desired leniency can be done with no data changes, but others need additions to CLDR. I thought I'd capture here some ideas that we have had in the past for dealing
with this.</p>
<h2>Non-CLDR</h2>
<ol>
  <li>We should be consistent about allowing extra or missing spaces both after fields and before.</li>
  <li>If we fail a parse, try other data for that field: e.g. when parsing for the month, first try what is in the pattern; if that fails try the others among: numeric; narrow,
    short, long; stand-alone narrow, short, long</li>
  <li>Accept common alternatives. Internally have our own cross-language equivalency sets: {whitespaces}, {apostrophes}, {periods}, etc. If a parse fails, try the other items in
    the equivalency sets.
    <ul>
      <li><b>Note:</b> this may also need to go into CLDR, if we don't want to duplicate the information across languages.</li>
    </ul>
  </li>
  <li>If a datetime format fails, try the other complete formats to see if any of them work. E.g.
    <ul>
      <li>For date, try full, long, medium, short; date, time, and datetime.</li>
      <li>For number try plain, number, integer, and scientific</li>
    </ul>
  </li>
  <li>To control this, add Format.set/getLeniency(). Probably 3 states:
    <ol>
      <li>roundtrip (only parse exactly what formats)</li>
      <li>normal (as above: flexible on the characters, trying other formats,)</li>
      <li>loose (allow out-of-range values: e.g. Jan 35 = Feb 4)</li>
    </ol>
    <p>We currently combine #2 and #3 together for dates (see <a href="http://oss.software.ibm.com/icu4j/doc/com/ibm/icu/text/DateFormat.html#setLenient(boolean)">setLenient</a>),
    but I think we want to separate them, and we want to be able to control leniency on numbers too, so moving it up to the Format superclass makes sense (to me at least!)</li>
</ol>
<p>Most of these had no real performance issues for currently acceptable input, since we only try alternatives if the parse fails.</p>
<h2>CLDR</h2>
<ol>
  <li>
    <p>For numbers, it was to have a UnicodeSet of alternatives that are accepted on input. E.g. for French numbers we have:</p>
    <p>&lt;numbers&gt;<br>
    &lt;symbols&gt;<br>
    &nbsp; &lt;decimal&gt;,&lt;/decimal&gt;<br>
    &nbsp; &lt;group&gt; &lt;/group&gt;<br>
    &nbsp; &lt;list&gt;;&lt;/list&gt;<br>
    &nbsp; &lt;percentSign&gt;%&lt;/percentSign&gt;<br>
    &nbsp; &lt;nativeZeroDigit&gt;0&lt;/nativeZeroDigit&gt;<br>
    &nbsp; &lt;patternDigit&gt;#&lt;/patternDigit&gt;<br>
    &nbsp; &lt;plusSign&gt;+&lt;/plusSign&gt;<br>
    &nbsp; &lt;minusSign&gt;-&lt;/minusSign&gt;<br>
    &nbsp; &lt;exponential&gt;E&lt;/exponential&gt;<br>
    &nbsp; &lt;perMille&gt;‰&lt;/perMille&gt;<br>
    &nbsp; &lt;infinity&gt;&#8734;&lt;/infinity&gt;<br>
    &nbsp; &lt;nan&gt;&#65533;&lt;/nan&gt;<br>
    &lt;/symbols&gt;</p>
    <p>We could add that any item could appear twice, with alternates. E.g.</p>
    <p>&nbsp; &lt;group&gt;\u00A0 &lt;/group&gt;<br>
    &nbsp; &lt;group on=&quot;parse&quot;&gt;[\u0020 ' <font size="3">’ , ]</font>&lt;/group&gt;<br>
    &nbsp;</li>
  <li>For dates, it's a bit more complicated, since the separators are in the pattern. This may also interplay with some of Deborah's ideas for generative dates. For string fields,
    we could use the above, e.g.
    <p><span class="m">&lt;</span><span class="t">month type</span><span class="m">=&quot;</span><b>9</b><span class="m">&quot;&gt;</span><span class="tx">sept.</span><span
    class="m">&lt;/</span><span class="t">month</span><span class="m">&gt;<br>
    &lt;<span class="t">month type</span>=&quot;<b>9</b>&quot; on=&quot;parse&quot;&gt;<span class="tx">sep.</span>&lt;/<span class="t">month</span>&gt;</span></p>
    <p><span class="m">For separators, here are a couple of ideas. We might want to use the first in numbers, instead of what is above. Here is a current example (locale=&quot;fr&quot;)</span></p>
    <p><span class="m">&lt;timeFormats&gt;<br>
    &nbsp; &lt;default type=&quot;medium&quot; /&gt;<br>
    &nbsp; &lt;timeFormatLength type=&quot;full&quot;&gt;<br>
    &nbsp;&nbsp;&nbsp; &lt;timeFormat type=&quot;standard&quot;&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;pattern type=&quot;standard&quot;&gt;HH' h 'mm z&lt;/pattern&gt;<br>
    </span>
    <ol>
      <li><span class="m">Common alternatives. We would add something like the following, which </span><font size="3">would allow any of the alternatives any time a ' appeared in
        any time pattern.</font>
        <p><span class="m">&nbsp; &lt;input&gt;&lt;for&gt;'&lt;/for&gt;&lt;accept&gt;</span><span class="m">[</span><font size="3">’ :]&lt;/accept&gt;<br>
        &nbsp;</font></li>
      <li><font size="3">Modified patterns. Add some syntax that would be specific to each pattern, e.g.</font>
        <p><span class="m">&lt;pattern type=&quot;standard&quot;&gt;HH'</span><span class="m">[</span><font size="3">’ :]</font><span class="m"> h '</span><span class="m">[</span><font
        size="3">’ :]</font><span class="m">mm z&lt;/pattern&gt;</span></li>
    </ol>
    <p>&nbsp;</p>
    &nbsp;</li>
</ol>

</body>

</html>
