/*
 ******************************************************************************
 * Copyright (C) 2004, International Business Machines Corporation and        *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
*/
package org.unicode.cldr.tool;

import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.unicode.cldr.util.CLDRFile;
import org.unicode.cldr.util.StandardCodes;
import org.unicode.cldr.util.Utility;
import org.unicode.cldr.util.XPathParts;
import org.unicode.cldr.util.CLDRFile.Factory;

import com.ibm.icu.util.Calendar;
import com.ibm.icu.util.TimeZone;

/**
 * Simple program to count the amount of data in CLDR. Internal Use.
 */
public class CountItems {
	private static Set keys = new HashSet();
	/**
	 * Count the data.
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {
		
		StandardCodes sc = StandardCodes.make();
		Map m = sc.getZoneLinkold_new();
		int i = 0;
		System.out.println("/* Generated by org.unicode.cldr.tool.CountItems */");
		System.out.println("/* Mapping old timezone codes to canonical codes */");
		for (Iterator it = m.keySet().iterator(); it.hasNext();) {
			String old = (String) it.next();
			String newOne = (String) m.get(old);
			System.out.println("\"" + old + "\", \"" + newOne + "\",");
			++i;
		}
		System.out.println("/* Total: " + i + " */");
		
		Map zone_countries = StandardCodes.make().getZoneToCounty();
		System.out.println("/* Mapping zones to countries */");
		for (Iterator it = zone_countries.keySet().iterator(); it.hasNext();) {
			String old = (String) it.next();
			String newOne = (String) zone_countries.get(old);
			System.out.println("\"" + old + "\", \"" + newOne + "\",");
			++i;
		}
		System.out.println("/* Total: " + i + " */");
		
		Map countries_zoneSet = StandardCodes.make().getCountryToZoneSet();
		System.out.println("/* Mapping countries to sets of zones */");
		for (Iterator it = countries_zoneSet.keySet().iterator(); it.hasNext();) {
			String old = (String) it.next();
			Set zones = (Set) countries_zoneSet.get(old);
			System.out.print("{\"" + old + "\", ");
			for (Iterator it2 = zones.iterator(); it2.hasNext();) {
				String zone = (String) it2.next();
				System.out.print("\"" + zone + "\",");			
			}
			System.out.println("},");
			++i;
		}
		System.out.println("/* Total: " + i + " */");
		
    	Factory mainCldrFactory = Factory.make(Utility.COMMON_DIRECTORY + "main" + File.separator, ".*");
		CLDRFile desiredLocaleFile = mainCldrFactory.make("root", true);
		String temp = desiredLocaleFile.getFullXPath("/ldml/dates/timeZoneNames/singleCountries");
		String singleCountriesList = (String) new XPathParts(null, null).set(
				temp).findAttributes("singleCountries").get("list");
		Set singleCountriesSet = new TreeSet(Utility.splitList(singleCountriesList, ' '));
		System.out.println();
		System.out.println("/* Single Countries List */");
		for (Iterator it = singleCountriesSet.iterator(); it.hasNext();) {
			String old = (String) it.next();
			System.out.println("\"" + old + "\",");
			++i;
		}
		System.out.println("/* Total: " + i + " */");

		
		if (true) return;
		
		Factory cldrFactory = CLDRFile.Factory.make(Utility.MAIN_DIRECTORY, ".*");
    	Map platform_locale_status = StandardCodes.make().getLocaleTypes();
    	Map onlyLocales = (Map) platform_locale_status.get("IBM");
    	Set locales = onlyLocales.keySet();
    	CLDRFile english = cldrFactory.make("en", true);
    	for (Iterator it = locales.iterator(); it.hasNext();) {
    		String locale = (String) it.next();
    	   	System.out.println(locale + "\t" + english.getName(locale,false) + "\t" + onlyLocales.get(locale));  		
    	}
    	if (true) return;
 
		//CLDRKey.main(new String[]{"-mde.*"});
		int count = countItems(cldrFactory, false);
		System.out.println("Count (core): " + count);
		count = countItems(cldrFactory, true);
		System.out.println("Count (resolved): " + count);
		System.out.println("Unique XPaths: " + keys.size());
	}

	/**
	 * @param cldrFactory
	 * @param resolved
	 */
	private static int countItems(Factory cldrFactory, boolean resolved) {
		int count = 0;
		Set locales = cldrFactory.getAvailable();
		for (Iterator it = locales.iterator(); it.hasNext();) {
			String locale = (String)it.next();
			CLDRFile item = cldrFactory.make(locale, resolved);
			keys.addAll(item.keySet());
			int current = item.keySet().size();
			System.out.println(locale + "\t" + current);
			count += current;
		}
		return count;
	}

}